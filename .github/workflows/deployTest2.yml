name: Deploy to Azure MicroK8s

on:
  push:
    branches:
      - main  # Trigger the workflow when code is pushed to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Check out code
        uses: actions/checkout@v2

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

      # Step 3: Build Docker image
      - name: Build Docker image
        run: docker build -t justine745/webservers:latest .

      # Step 4: Push Docker image to Docker Hub
      - name: Push Docker image
        run: docker push justine745/webservers:latest

      # Step 5: Set up SSH for Azure server
      - name: Set up SSH for Azure server
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.AZURE_SSH_KEY }}

      # Step 6: Create deploy.sh script file
      - name: Create deploy.sh script
        run: |
          echo '#!/bin/bash' > deploy.sh
          echo 'sudo microk8s kubectl set image deployment/nginx-webserver nginx=justine745/webservers:latest' >> deploy.sh
          echo 'sudo microk8s kubectl rollout status deployment/nginx-webserver' >> deploy.sh

      # Step 7: Copy deploy.sh to Azure server
      - name: Copy deploy.sh to Azure server
        run: |
          scp -o StrictHostKeyChecking=no deploy.sh azureuser@20.224.160.198:/home/azureuser/deploy.sh

      # Step 8: Run deploy.sh on Azure server
      - name: Run deploy.sh on Azure server
        run: |
          ssh -o StrictHostKeyChecking=no azureuser@20.224.160.198 'bash /home/azureuser/deploy.sh'
